plugins {
    id "net.ltgt.apt" version "0.10"
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.geoschnitzel.treasurehunt"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            buildConfigField 'String', 'ENDPOINT', "\"http://example.org:8080\""
            manifestPlaceholders += [("USES_CLEARTEXT"):"false"]
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
            manifestPlaceholders += [("USES_CLEARTEXT"):"true"]
            buildConfigField 'String', 'ENDPOINT', "\"http://${getIP()}:8080\""
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions{
        exclude "META-INF/license.txt"
        exclude "META-INF/notice.txt"
    }

    flavorDimensions "default"

    productFlavors {
        prod {
            applicationIdSuffix ".prod"
            versionNameSuffix "-prod"
            dimension "default"
        }
        /*uiTest {
            applicationIdSuffix ".uitest"
            versionNameSuffix "-uitest"
            dimension "default"
        }*/
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'uiTest') {
            variant.setIgnore(true)
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support.test.espresso.idling:idling-concurrent:3.0.2"
    implementation group: 'com.google.guava', name: 'guava', version: '24.1-jre'
    implementation 'com.google.code.findbugs:jsr305:2.0.1'
    implementation 'com.google.android.gms:play-services-maps:16.0.0'
    implementation 'com.google.android.gms:play-services-places:16.0.0'
    implementation 'com.google.android.gms:play-services-location:16.0.0'
    implementation 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.5'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.5'
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib'
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect'

    implementation project(':shared-treasurehunt')
    implementation 'com.android.support:leanback-v17:28.0.0'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-all:1.10.19"
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation 'org.apache.httpcomponents:httpclient:4.5.5'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation("com.android.support.test.espresso.idling:idling-concurrent:3.0.2")
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1')
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:3.0.1')
    androidTestImplementation('com.forkingcode.espresso.contrib:espresso-descendant-actions:1.2.0')
}

//from http://jeremie-martinez.com/2015/05/05/inject-host-gradle/
static def getIP() {
    InetAddress result = null
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces()
    while (interfaces.hasMoreElements()) {
        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses()
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement()
            if (!address.isLoopbackAddress() && (address instanceof Inet4Address)) {
                if (address.isSiteLocalAddress()) {
                    return address.getHostAddress()
                } else if (result == null) {
                    result = address
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress()
}